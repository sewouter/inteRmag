comp$prob.int.vol.x <- comp$int.vol.x & !is.na(test$xint) & !is.na(test$xvol)
comp$prob.int.vol.y <- comp$int.vol.y & !is.na(test$yint) & !is.na(test$yvol)
comp$prob.int.vol.z <- comp$int.vol.z & !is.na(test$zint) & !is.na(test$zvol)
comp$prob.int.mass.x <- comp$int.mass.x & !is.na(test$xint) & !is.na(test$xmass)
comp$prob.int.mass.y <- comp$int.mass.y & !is.na(test$yint) & !is.na(test$ymass)
comp$prob.int.mass.z <- comp$int.mass.z & !is.na(test$zint) & !is.na(test$zmass)
comp$prob.vol.mass.x <- comp$vol.mass.x & !is.na(test$xvol) & !is.na(test$xmass)
comp$prob.vol.mass.y <- comp$vol.mass.y & !is.na(test$yvol) & !is.na(test$ymass)
comp$prob.vol.mass.z <- comp$vol.mass.z & !is.na(test$zvol) & !is.na(test$zmass)
# ----
if(any(comp$prob.int.vol.x)){
prob.int.vol.x.pos <- which(comp$prob.int.vol.x)
warning("xint cannot be obtained correctly from xvol at lines: ",
paste(select[prob.int.vol.x.pos], collapse = ", "))
}
if(any(comp$prob.int.vol.y)){
prob.int.vol.y.pos <- which(comp$prob.int.vol.y)
warning("yint cannot be obtained correctly from yvol at lines: ",
paste(select[prob.int.vol.y.pos], collapse = ", "))
}
if(any(comp$prob.int.vol.z)){
prob.int.vol.z.pos <- which(comp$prob.int.vol.z)
warning("zint cannot be obtained correctly from zvol at lines: ",
paste(select[prob.int.vol.z.pos], collapse = ", "))
}
# ----
if(any(comp$prob.int.mass.x)){
prob.int.mass.x.pos <- which(comp$prob.int.mass.x)
warning("xint cannot be obtained correctly from xmass at lines: ",
paste(select[prob.int.mass.x.pos], collapse = ", "))
}
if(any(comp$prob.int.mass.y)){
prob.int.mass.y.pos <- which(comp$prob.int.mass.y)
warning("yint cannot be obtained correctly from ymass at lines: ",
paste(select[prob.int.mass.y.pos], collapse = ", "))
}
if(any(comp$prob.int.mass.z)){
prob.int.mass.z.pos <- which(comp$prob.int.mass.z)
warning("zint cannot be obtained correctly from zmass at lines: ",
paste(select[prob.int.mass.z.pos], collapse = ", "))
}
# ----
if(any(comp$prob.vol.mass.x)){
prob.vol.mass.x.pos <- which(comp$prob.vol.mass.x)
warning("xvol cannot be obtained correctly from xmass at lines: ",
paste(select[prob.vol.mass.x.pos], collapse = ", "))
}
if(any(comp$prob.vol.mass.y)){
prob.vol.mass.y.pos <- which(comp$prob.vol.mass.y)
warning("yvol cannot be obtained correctly from ymass at lines: ",
paste(select[prob.vol.mass.y.pos], collapse = ", "))
}
if(any(comp$prob.vol.mass.z)){
prob.vol.mass.z.pos <- which(comp$prob.vol.mass.z)
warning("zvol cannot be obtained correctly from zmass at lines: ",
paste(select[prob.vol.mass.z.pos], collapse = ", "))
}
# Convert
# SAY IN DESCRIPTION THE ORDER OF PRIORITY -----------------------------------------------------
npmob$xint[na.xint & !na.xvol] <- test$xint.from.xvol[na.xint & !na.xvol]
npmob$yint[na.yint & !na.yvol] <- test$yint.from.yvol[na.yint & !na.yvol]
npmob$zint[na.zint & !na.zvol] <- test$zint.from.zvol[na.zint & !na.zvol]
npmob$xint[na.xint & na.xvol & !na.xmass] <- test$xint.from.xmass[na.xint & na.xvol & !na.xmass]
npmob$yint[na.yint & na.yvol & !na.ymass] <- test$yint.from.ymass[na.yint & na.yvol & !na.ymass]
npmob$zint[na.zint & na.zvol & !na.zmass] <- test$zint.from.zmass[na.zint & na.zvol & !na.zmass]
# ----
npmob$xvol[!na.xint & na.xvol] <- test$xvol.from.xint[!na.xint & na.xvol]
npmob$yvol[!na.yint & na.yvol] <- test$yvol.from.yint[!na.yint & na.yvol]
npmob$zvol[!na.zint & na.zvol] <- test$zvol.from.zint[!na.zint & na.zvol]
npmob$xvol[na.xint & na.xvol & !na.xmass] <- test$xvol.from.xmass[na.xint & na.xvol & !na.xmass]
npmob$yvol[na.yint & na.yvol & !na.ymass] <- test$yvol.from.ymass[na.yint & na.yvol & !na.ymass]
npmob$zvol[na.zint & na.zvol & !na.zmass] <- test$zvol.from.zmass[na.zint & na.zvol & !na.zmass]
# ----
npmob$xmass[!na.xint & na.xmass] <- test$xmass.from.xint[!na.xint & na.xmass]
npmob$ymass[!na.yint & na.ymass] <- test$ymass.from.yint[!na.yint & na.ymass]
npmob$zmass[!na.zint & na.zmass] <- test$zmass.from.zint[!na.zint & na.zmass]
npmob$xmass[na.xint & na.xmass & !na.xvol] <- test$xmass.from.xvol[na.xint & na.xmass & !na.xvol]
npmob$ymass[na.yint & na.ymass & !na.yvol] <- test$ymass.from.yvol[na.yint & na.ymass & !na.yvol]
npmob$zmass[na.zint & na.zmass & !na.zvol] <- test$zmass.from.zvol[na.zint & na.zmass & !na.zvol]
}
# ----
if(isTRUE(convert.magsus)){
if(is.null(pmob$totmagsus))  npmob <- pmob.add(pmob = npmob, totmagsus = NA)
if(is.null(pmob$volmagsus))  npmob <- pmob.add(pmob = npmob, volmagsus = NA)
if(is.null(pmob$massmagsus)) npmob <- pmob.add(pmob = npmob, massmagsus = NA)
na.totms  <- is.na(npmob$totmagsus)
na.volms  <- is.na(npmob$volmagsus)
na.massms <- is.na(npmob$massmagsus)
test.ms <- data.frame(totms = npmob$totmagsus,
volms = npmob$volmagsus,
massms = npmob$massmagsus,
totms.from.volms = npmob$volmagsus * npmob$vol,
totms.from.massms = npmob$massmagsus * npmob$mass,
volms.from.totms = npmob$totmagsus / npmob$vol,
volms.from.massms =
(npmob$massmagsus * npmob$mass) / npmob$vol,
massms.from.totms = npmob$totmagsus / npmob$mass,
massms.from.volms =
(npmob$volmagsus * npmob$vol) / npmob$mass)
charfun <- function(x) sprintf(paste0("%.", digits,"E"), x)
comp.ms <- data.frame(totms = charfun(test.ms$totms),
volms = charfun(test.ms$volms),
massms = charfun(test.ms$massms),
totms.from.volms = charfun(test.ms$totms.from.volms),
totms.from.massms =charfun(test.ms$totms.from.massms),
volms.from.totms =charfun(test.ms$volms.from.totms),
volms.from.massms = charfun(test.ms$volms.from.massms),
massms.from.totms = charfun(test.ms$massms.from.totms),
massms.from.volms = charfun(test.ms$massms.from.volms))
comp.ms$tot.vol.ms  <- comp.ms$totms == comp.ms$totms.from.volms
comp.ms$tot.mass.ms <- comp.ms$totms == comp.ms$totms.from.massms
comp.ms$vol.mass.ms <- comp.ms$volms == comp.ms$volms.from.massms
# ----
comp.ms$prob.tot.vol.ms <- comp.ms$tot.vol.ms &
!is.na(test.ms$totms) &
!is.na(test.ms$volms)
comp.ms$prob.tot.mass.ms <- comp.ms$tot.mass.ms &
!is.na(test.ms$totms) &
!is.na(test.ms$massms)
comp.ms$prob.vol.mass.ms <- comp.ms$vol.mass.ms &
!is.na(test.ms$volms) &
!is.na(test.ms$massms)
if(any(comp.ms$prob.tot.vol.ms)){
prob.tot.vol.ms.pos <- which(comp.ms$prob.tot.vol.ms)
warning("totmagsus cannot be obtained correctly from volmagsus at lines: ",
paste(select[prob.tot.vol.ms.pos], collapse = ", "))
}
if(any(comp.ms$prob.tot.mass.ms)){
prob.tot.mass.ms.pos <- which(comp.ms$prob.tot.mass.ms)
warning("totmagsus cannot be obtained correctly from massmagsus at lines: ",
paste(select[prob.tot.mass.ms.pos], collapse = ", "))
}
if(any(comp.ms$prob.vol.mass.ms)){
prob.vol.mass.ms.pos <- which(comp.ms$prob.vol.mass.ms)
warning("volmagsus cannot be obtained correctly from massmagsus at lines: ",
paste(select[prob.vol.mass.ms.pos], collapse = ", "))
}
# Convert
# SAY IN DESCRIPTION THE ORDER OF PRIORITY -------------------------------------------------
npmob$totmagsus[na.totms & !na.volms] <- test.ms$totms.from.volms[na.totms & !na.volms]
npmob$totmagsus[na.totms & na.volms & !na.massms] <- test.ms$totms.from.massms[na.totms & na.volms & !na.massms]
# ----
npmob$volmagsus[!na.totms & na.volms] <- test.ms$volms.from.totms[!na.totms & na.volms]
npmob$volmagsus[na.totms & na.volms & !na.massms] <- test.ms$volms.from.massms[na.totms & na.volms & !na.massms]
# ----
npmob$massmagsus[!na.totms & na.massms] <- test.ms$massms.from.totms[!na.totms & na.massms]
npmob$massmagsus[na.totms & !na.volms & na.massms] <- test.ms$massms.from.volms[na.totms & !na.volms & na.massms]
}
if(isTRUE(convert.mag) & isTRUE(convert.magsus)){
remove <- colnames(pmob) %in% c("xint",  "yint",  "zint",
"xvol",  "yvol",  "zvol",
"xmass", "ymass", "zmass",
"totmagsus", "volmagsus", "massmagsus",
"vol",   "mass",  "dens")
out <- pmob[, !remove, drop = F]
out <- pmob.add(pmob = out,
xint = NA,  yint = NA,  zint = NA,
xvol = NA,  yvol = NA,  zvol = NA,
xmass = NA, ymass = NA, zmass = NA,
totmagsus = NA, volmagsus = NA, massmagsus = NA,
vol = NA,   mass = NA,  dens = NA)
out$xint[select]       <- npmob$xint
out$yint[select]       <- npmob$yint
out$zint[select]       <- npmob$zint
out$xvol[select]       <- npmob$xvol
out$yvol[select]       <- npmob$yvol
out$zvol[select]       <- npmob$zvol
out$xmass[select]      <- npmob$xmass
out$ymass[select]      <- npmob$ymass
out$zmass[select]      <- npmob$zmass
out$totmagsus[select]  <- npmob$totmagsus
out$volmagsus[select]  <- npmob$volmagsus
out$massmagsus[select] <- npmob$massmagsus
out$vol[select]        <- npmob$vol
out$mass[select]       <- npmob$mass
out$dens[select]       <- npmob$dens
} else if(isTRUE(convert.mag) & !isTRUE(convert.magsus)) {
remove <- colnames(pmob) %in% c("xint",  "yint",  "zint",
"xvol",  "yvol",  "zvol",
"xmass", "ymass", "zmass",
"vol",   "mass",  "dens")
out <- pmob[, !remove, drop = F]
out <- pmob.add(pmob = out,
xint = NA,  yint = NA,  zint = NA,
xvol = NA,  yvol = NA,  zvol = NA,
xmass = NA, ymass = NA, zmass = NA,
vol = NA,   mass = NA,  dens = NA)
out$xint[select]       <- npmob$xint
out$yint[select]       <- npmob$yint
out$zint[select]       <- npmob$zint
out$xvol[select]       <- npmob$xvol
out$yvol[select]       <- npmob$yvol
out$zvol[select]       <- npmob$zvol
out$xmass[select]      <- npmob$xmass
out$ymass[select]      <- npmob$ymass
out$zmass[select]      <- npmob$zmass
out$vol[select]        <- npmob$vol
out$mass[select]       <- npmob$mass
out$dens[select]       <- npmob$dens
} else if(!isTRUE(convert.mag) & isTRUE(convert.magsus)) {
remove <- colnames(pmob) %in% c("totmagsus", "volmagsus", "massmagsus",
"vol",   "mass",  "dens")
out <- pmob[, !remove, drop = F]
out <- pmob.add(pmob = out,
totmagsus = NA, volmagsus = NA, massmagsus = NA,
vol = NA,   mass = NA,  dens = NA)
out$totmagsus[select]  <- npmob$totmagsus
out$volmagsus[select]  <- npmob$volmagsus
out$massmagsus[select] <- npmob$massmagsus
out$vol[select]        <- npmob$vol
out$mass[select]       <- npmob$mass
out$dens[select]       <- npmob$dens
} else if(!isTRUE(convert.mag) & !isTRUE(convert.magsus)) {
remove <- colnames(pmob) %in% c("vol",   "mass",  "dens")
out <- pmob[, !remove, drop = F]
out <- pmob.add(pmob = out,
vol = NA,   mass = NA,  dens = NA)
out$vol[select]        <- npmob$vol
out$mass[select]       <- npmob$mass
out$dens[select]       <- npmob$dens
}
# ----
View(out)
10e3 * 27
10.8 * 1.1
# ----
library(inteRmag)
# ----
pmob <- as.pmob(sampleid = c("A1", "B2", "C3"),
xint = c(200, 450, NA),
yint = c(60, 30, NA),
zint = c(10, 20, NA),
xvol = c(NA, NA, 800000),
yvol = c(NA, NA,  60000),
zvol = c(NA, NA,  30000),
mass = c(0.020, 0.027, 0.010))
pmob.vol.mass(pmob)
pmob.vol.mass(pmob, convert.magsus = F)
pmob <- as.pmob(sampid = c("A1", "B2", "C3"),
xint = c(200, 450, NA),
yint = c(60, 30, NA),
zint = c(10, 20, NA),
xvol = c(NA, NA, 800000),
yvol = c(NA, NA,  60000),
zvol = c(NA, NA,  30000),
mass = c(0.020, 0.027, 0.010))
pmob.vol.mass(pmob, convert.magsus = F)
out <- pmob.vol.mass(pmob, convert.magsus = F)
out$vol * 100000
out$vol * 1e-06
out$vol * 1e06
# ----
library(dplyr)
library(inteRmag)
library(StratigrapheR)
# ----
# setwd("C:/Users/Seb/Desktop/Doctorate/2. Italy/Paleomagnetism/Import Montpellier")
setwd("C:/Users/User/Desktop/CycloCross/Tests/pmob vol mass")
# ----
load("ITALY2 Montpellier.pmob")
pmob <- it2
# Give dates ----
time <- paste0(pmob$meashour, ":", pmob$measmin, ":", round(pmob$meassec,0))
cl.time <- as.POSIXlt(time, format = c("%H:%M:%S"))
i.time <- as.numeric(cl.time)
df <- data.frame(index = seq(length(i.time)), x = i.time)
df$difflag  <- lag(df$x) - df$x
df$mark1    <- df$difflag > 0
df$mark1[1] <- T
nid <- cumsum(as.integer(df$mark1))
npmob <- pmob.add(pmob = pmob, measday = nid, measmonth = 1, measyear = 9000)
pmob <- npmob
cpmob <- pmob.correct.measure(pmob = npmob, method.blank = "approx",
contact.blank = T, id.contact.blank = T,
center.blank = T, center.holder = T,
blank.x.lim = c(-35, 35),
blank.y.lim = c(-50, 80),
blank.z.lim = c(-55, 60),
holder.x.lim = c(-120, 260),
holder.y.lim = c(-170, 50),
holder.z.lim = c(-100, 350),
output.suspect.lines = F)
# ----
# ----
pmob.vol.mass
# ----
library(dplyr)
library(inteRmag)
library(StratigrapheR)
# ----
# setwd("C:/Users/Seb/Desktop/Doctorate/2. Italy/Paleomagnetism/Import Montpellier")
setwd("C:/Users/User/Desktop/Doctorate/2. Italy/Paleomagnetism/Import Montpellier")
# ----
load("ITALY2 Montpellier.pmob")
pmob <- it2
# Give dates ----
time <- paste0(pmob$meashour, ":", pmob$measmin, ":", round(pmob$meassec,0))
cl.time <- as.POSIXlt(time, format = c("%H:%M:%S"))
i.time <- as.numeric(cl.time)
df <- data.frame(index = seq(length(i.time)), x = i.time)
df$difflag  <- lag(df$x) - df$x
df$mark1    <- df$difflag > 0
df$mark1[1] <- T
nid <- cumsum(as.integer(df$mark1))
npmob <- pmob.add(pmob = pmob, measday = nid, measmonth = 1, measyear = 9000)
pmob <- npmob
cpmob <- pmob.correct.measure(pmob = npmob, method.blank = "approx",
contact.blank = T, id.contact.blank = T,
center.blank = T, center.holder = T,
blank.x.lim = c(-35, 35),
blank.y.lim = c(-50, 80),
blank.z.lim = c(-55, 60),
holder.x.lim = c(-120, 260),
holder.y.lim = c(-170, 50),
holder.z.lim = c(-100, 350),
output.suspect.lines = F)
# convert holder in volume only ??
mpmob <- pmob.vol.mass(cpmob, convert.magsus = F)
View(mpmob)
pmob.vol.mass
# ----
library(dplyr)
library(inteRmag)
library(StratigrapheR)
# ----
# setwd("C:/Users/Seb/Desktop/Doctorate/2. Italy/Paleomagnetism/Import Montpellier")
setwd("C:/Users/User/Desktop/Doctorate/2. Italy/Paleomagnetism/Import Montpellier")
# ----
load("ITALY2 Montpellier.pmob")
pmob <- it2
# Give dates ----
time <- paste0(pmob$meashour, ":", pmob$measmin, ":", round(pmob$meassec,0))
cl.time <- as.POSIXlt(time, format = c("%H:%M:%S"))
i.time <- as.numeric(cl.time)
df <- data.frame(index = seq(length(i.time)), x = i.time)
df$difflag  <- lag(df$x) - df$x
df$mark1    <- df$difflag > 0
df$mark1[1] <- T
nid <- cumsum(as.integer(df$mark1))
npmob <- pmob.add(pmob = pmob, measday = nid, measmonth = 1, measyear = 9000)
pmob <- npmob
cpmob <- pmob.correct.measure(pmob = npmob, method.blank = "approx",
contact.blank = T, id.contact.blank = T,
center.blank = T, center.holder = T,
blank.x.lim = c(-35, 35),
blank.y.lim = c(-50, 80),
blank.z.lim = c(-55, 60),
holder.x.lim = c(-120, 260),
holder.y.lim = c(-170, 50),
holder.z.lim = c(-100, 350),
output.suspect.lines = F)
# convert holder in volume only ??
mpmob <- pmob.vol.mass(cpmob, convert.magsus = F)
View(mpmob)
write.csv(mpmob, "Bosso & Frontone 2.csv")
pmob_to_ppl(mpmob, "Bosso & Frontone 2")
?as.pmob
library(inteRmag)
library(StratigrapheR)
?pkgfind
pkgfind("inteRmag", "magvarcorr")
# ----
library(dplyr)
library(inteRmag)
library(lubridate)
# Import File ----
setwd("C:/Users/Seb/Desktop/Doctorate/2. Italy/Paleomagnetism/Import Montpellier")
# ----
general.file <- "Core orientations frnx bosy cmax.csv"
general <- read.csv(general.file, sep = ";", dec = ".")
# ----
files <- list.files(path = getwd(), pattern = "*.txt")
lf <- length(files)
refile <- c(files[c(lf, lf - 1)], files[-c(lf - 1, lf)])
s <- seq_len(length(refile))
i <- 1
accu <- data.frame(matrix(nrow = 0, ncol = 12))
colnames(accu) <- c("background", "x", "errorx", "y", "errory", "z", "errorz",
"nm", "id", "comment", "time")
for(i in s)
{
a <- read.table(refile[i], stringsAsFactors = F)
colnames(a) <- c("background", "x", "errorx", "y", "errory", "z", "errorz",
"nm", "id", "comment", "time")
a$file <- refile[i]
ofl <- data.frame(fileline = seq(nrow(a)))
a <- cbind(a, ofl)
accu <- rbind(accu, a)
}
db <- accu
# Check db ----
manual_table_check(db, plot = F)
unique(db$id)
table(db$id)
problems <- c("bosy82", "bosy125", "bosy1223", "frnx", "fnrx56", "fnrx57 ",
"fnrx58", "fnrx59", "fnrx60", "fnrx61", "fnrx62", "fnrx63",
"fnrx64")
db[which(db$id %in% problems),]
unique_row <- apply(db[,-ncol(db)], 1, function(x) paste0(x, collapse = " "))
out <- db[!duplicated(unique_row),]
# ----
out$isblank <- NA
out$isblank[out$background == 0] <- T
out$isblank[out$background == 1] <- F
any(is.na(out$isblank))
out$isholder <- F
out$isholder[out$id == "pe"] <- T
out$siteid <- NA
out$siteid[grepl("bos", out$id)] <- "Bosso"
out$siteid[grepl("cma", out$id)] <- "Monte Acuto"
out$siteid[grepl("frn", out$id)] <- "Frontone"
out$treattemp                   <- out$comment + 273.15
out$treattemp[out$comment == 0] <- 20 + 273.15
unique(out$treattemp) - 273.15
out$meashour <- floor(out$time)
out$decmin <- (out$time - out$meashour) * 60
out$measmin <- floor(out$decmin)
out$meassec <- (out$decmin - out$measmin) * 60
colnames(out)
IT2.incomplete <- as.pmob(sampid = out$id,
siteid = out$siteid,
meassec = out$meassec,
measmin = out$measmin,
meashour = out$meashour,
xint = out$x,
yint = out$y,
zint = out$z,
xinterror = out$errorx,
yinterror = out$errory,
zinterror = out$errorz,
blankcor = F,
isblank = out$isblank,
holdercor = F,
isholder = out$isholder,
treattemp = out$treattemp,
originalfile = out$file,
originalfileline = out$fileline,
nm = out$nm)
colnames(general)
ITgeneral <- as.pmob(sampid = general$name,
depth = general$dt_cm/100,
mass = general$mass_g/1000,
sampaz = general$sampaz,
sampdip = general$sampdip,
samprot = general$samprot,
bedaz = general$bedaz,
beddip = general$beddip,
coraz = 0, cordip = 90, corrot = 0,
magazvarcor = F, bedazvarcor = F,
comment = general$comment,
pomeroy_inc = general$pomeroy_inc)
it2 <- pmob.merge(IT2.incomplete, ITgeneral)
colnames(it2)
pkgfind("inteRmag", "magazvarcorr")
# Packages ----
library(devtools)
# Set the working directory ----
setwd("C:/Users/Seb/Desktop/CycloCross")
data.file <- "Set Data for Examples"
fichier <- paste(data.file,"Frontone14.pmob",sep="/")
load(fichier)
frontone14.pmob
frontone14.pmob$magazvarcor <- F
frontone14.pmob
pmob.col.sort(frontone14.pmob)
frontone14.pmob$magazvarcorr <- NULL
frontone14.pmob$
frontone14.pmob
frontone14.pmob
pmob.col.sort(frontone14.pmob)
frontone14.pmob <- pmob.col.sort(frontone14.pmob)
save(frontone14.pmob, "Frontone14.pmob")
?save
save(frontone14.pmob, file = "Frontone14.pmob")
# Packages ----
library(devtools)
# Set the working directory ----
setwd("C:/Users/Seb/Desktop/CycloCross")
data.file <- "Set Data for Examples"
fichier <- paste(data.file,"Frontone14.pmob",sep="/")
load(fichier)
frontone14.pmob
setwd("C:/Users/Seb/Desktop/CycloCross/inteRmag")
use_data(frontone14.pmob)
setwd("C:/Users/User/Desktop/CycloCross/Set Data for Examples")
# Packages ----
library(devtools)
# Set the working directory ----
setwd("C:/Users/User/Desktop/CycloCross")
data.file <- "Set Data for Examples"
fichier <- paste(data.file,"Frontone14.pmob",sep="/")
load(fichier)
frontone14.pmob
#2. Exportation ----
setwd("C:/Users/User/Desktop/CycloCross/inteRmag")
use_data(frontone14.pmob)
use_data(frontone14.pmob, overwrite = T)
library(inteRmag)
frontone14.pmob
(2.54/2)^2 * pi * 2.54
(2.54/2)^2 * pi * 2
library(inteRmag)
library(rox)
library(roxygen2)
roxygenise()
library(inteRmag)
?pmob.vol.mass
pi * (2.5/2)^2 *2.2
library(inteRmag)
library(roxygen2)
roxygenise()
library(inteRmag)
